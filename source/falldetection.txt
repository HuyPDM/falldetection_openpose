import cv2 as cv
import numpy as np
import argparse
import math
from queue import Queue
from collections import deque
parser = argparse.ArgumentParser()
parser.add_argument('--input', help='Path to image or video. Skip to capture frames from camera')
parser.add_argument('--thr', default=0.2, type=float, help='Threshold value for pose parts heat map')
parser.add_argument('--width', default=352, type=int, help='Resize input to specific width.')
parser.add_argument('--height', default=288, type=int, help='Resize input to specific height.')

args = parser.parse_args()
nb_f=30
Vn= 90
BODY_PARTS = { "Nose": 0, "Neck": 1, "RShoulder": 2, "RElbow": 3, "RWrist": 4,
               "LShoulder": 5, "LElbow": 6, "LWrist": 7, "RHip": 8, "RKnee": 9,
               "RAnkle": 10, "LHip": 11, "LKnee": 12, "LAnkle": 13, "REye": 14,
               "LEye": 15, "REar": 16, "LEar": 17, "Background": 18 }

POSE_PAIRS = [ ["Neck", "RShoulder"], ["Neck", "LShoulder"], ["RShoulder", "RElbow"],
               ["RElbow", "RWrist"], ["LShoulder", "LElbow"], ["LElbow", "LWrist"],
               ["Neck", "RHip"], ["RHip", "RKnee"], ["RKnee", "RAnkle"], ["Neck", "LHip"],
               ["LHip", "LKnee"], ["LKnee", "LAnkle"], ["Neck", "Nose"], ["Nose", "REye"],
               ["REye", "REar"], ["Nose", "LEye"], ["LEye", "LEar"] ]

PColors = [[255, 0, 0], [255, 85, 0], [255, 170, 0], [255, 255, 0], [170, 255, 0], [85, 255, 0], [0, 255, 0],
              [0, 255, 85], [0, 255, 170], [0, 255, 255], [0, 170, 255], [0, 85, 255], [0, 0, 255], [85, 0, 255],
              [170, 0, 255], [255, 0, 255], [255, 0, 170], [255, 0, 85]]
inWidth = args.width
inHeight = args.height

net = cv.dnn.readNetFromTensorflow("graph_opt.pb")

cap = cv.VideoCapture(-1)
cap.set(3,330)
cap.set(4,288)
temp= [None, None]
i=0
while cv.waitKey(1) < 0:
    hasFrame, frame = cap.read()
    if not hasFrame:
        cv.waitKey()
        break
    i=i+1
    frameWidth = frame.shape[1]
    frameHeight = frame.shape[0]
    fps = cap.get(cv.CAP_PROP_FPS)
    pos_msec = cap.get(cv.CAP_PROP_POS_MSEC)
    pos_frames = cap.get(cv.CAP_PROP_POS_FRAMES)
    print ('initial attributes: fps = {}, pos_msec = {}, pos_frames = {}'.format(fps, pos_msec, pos_frames))
    net.setInput(cv.dnn.blobFromImage(frame, 1.0, (inWidth, inHeight), (127.5, 127.5, 127.5), swapRB=True, crop=False))
    out = net.forward()
    out = out[:, :19, :, :]  # MobileNet output [1, 57, -1, -1], we only need the first 19 elements

    assert(len(BODY_PARTS) == out.shape[1])
    G = deque([temp,temp,temp,temp,temp,temp,temp,temp,temp,temp]) # colect frames in 1 sec 
    points = []
    for i in range(len(BODY_PARTS)):
        # Slice heatmap of corresponging body's part.
        heatMap = out[0, i, :, :]

        # Originally, we try to find all the local maximums. To simplify a sample
        # we just find a global one. However only a single pose at the same time
        # could be detected this way.
        _, conf, _, point = cv.minMaxLoc(heatMap)
        x = (frameWidth * point[0]) / out.shape[3]
        y = (frameHeight * point[1]) / out.shape[2]
        # Add a point if it's confidence is higher than threshold.
        points.append((int(x), int(y)) if conf > args.thr else None)

    for pair in POSE_PAIRS:
        partFrom = pair[0]
        partTo = pair[1]
        assert(partFrom in BODY_PARTS)
        assert(partTo in BODY_PARTS)

        idFrom = BODY_PARTS[partFrom]
        idTo = BODY_PARTS[partTo]


        if points[idFrom] and points[idTo]:
            cv.line(frame, points[idFrom], points[idTo], PColors[idFrom], 3)
            cv.ellipse(frame, points[idFrom], (3, 3), 0, 0, 360, (0, 0, 255), cv.FILLED)
            cv.ellipse(frame, points[idTo], (3, 3), 0, 0, 360, (0, 0, 255), cv.FILLED)
    if points[8] is None and points[11] is None:
        print("no hip detective")
        temp =[None,None] 
    elif points[8] is None :
        temp= points[11]
    else :
        temp= points[8]
    G.pop()
    G.append(temp)
    try:
        v=float(abs(G[0][1]-G[9][1])/0.3) # speed oqf mid point human fall
        print(v)
        if (v >= Vn):
            
            print("fall detective")
            
        # vertival of body
        #    if points[10] is None and points[13] is None:
        #        print("need see all human body cant read the ankle")
        #    elif points[10] and points[13]:
        #        Px=(points[10][0]+ points[13][0])/2
        #        Py=(points[10][1]+ points[13][1])/2
        #        Pxy= [Px,Py]
        #    elif points[10] :
        #        Pxy= points[10]
        #    else:
        #        Pxy= points[13]

    except :
        print("cant read point ") 
    print(G)
    
    t, _ = net.getPerfProfile()
    freq = cv.getTickFrequency() / 1000
    cv.putText(frame, '%.2fms' % (t / freq), (10, 20), cv.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0))

    cv.imshow('OpenPose using OpenCV', frame)